import pygame
import sys
import subprocess
import os
import random
from pathlib import Path

path = os.path.abspath('jetsoftime')
for dirpath, _, _ in os.walk(path):
    sys.path.append(dirpath)
# from jetsoftime.sourcefiles.randosettings import *
# from jetsoftime.sourcefiles.randomizer import *
import randomizer
from randosettings import Settings, GameFlags, Difficulty, ShopPrices, \
    TechOrder, TabSettings, TabRandoScheme, ROSettings, ROFlags, \
    CosmeticFlags, GameMode, MysterySettings, CharNames


"""
Setup and Use Instructions

<----- Assumptions ----->
Assuming you have a Chrono Trigger rom (legally obtained) and have it working on a hand held...
Assuming you have the ability to run pygames (anbernic devices already setup to do this)...

<----- Setup ----->
Update the `snes_rom_path` to be the absolute path to your snes rom folder.  The Chrono Trigger rom should be in this folder
Update the `rom_file` to match the file name of the Chrono Trigger rom
scp the entire jets of time repo into the pygame folder on the device
Update the game list on the device (or restart the device)
Run `jetsoftime_randomizer` game on the pygame menu
This will launch the GUI interface.

<----- Use Instructions ----->
On the left side are different menu buttons, when selected will bring up different option buttons
There are presets available, when selected will auto populate the settings to the presets.  These can then be further edited
In general, go through the different menu categories to configure the different randomizer options
The capability is good to generate randomized runs for most use cases, but does not have the same capabilities of the desktop or web applications
If more customization is desired, generate the roms using desktop/web applications and scp them to handheld
"""

'''
Developer TODO List
Auto detect rom and snes rom path on device
Setup process for deployment to avoid copying over the entire repo
Add another column for flags so that more can be displayed on screen, or split them up into different flag categories (such as Qol)

Refactor Tests:

Getting the error message when trying to generate:


Traceback (most recent call last):
  File "/home/nausea911/Downloads/romhacks/jetsoftime/JetsOfTimeTravel/jetsoftime.pygame", line 455, in <module>
    game_state.focusable.activate()
  File "/home/nausea911/Downloads/romhacks/jetsoftime/JetsOfTimeTravel/jetsoftime.pygame", line 194, in activate
    self.callback()
  File "/home/nausea911/Downloads/romhacks/jetsoftime/JetsOfTimeTravel/jetsoftime.pygame", line 158, in generate_rom
    rando.set_random_config()
  File "/home/nausea911/Downloads/romhacks/jetsoftime/JetsOfTimeTravel/jetsoftime/sourcefiles/randomizer.py", line 180, in set_random_config
    if rset.GameFlags.MYSTERY in self.settings.gameflags:
  File "/home/nausea911/miniforge3/envs/jetsoftime/lib/python3.10/enum.py", line 876, in __contains__
    raise TypeError(
TypeError: unsupported operand type(s) for 'in': 'GameFlags' and 'GameFlags'

'''

snes_rom_path = '/userdata/roms/snes' # TODO(user):  Update if needed
snes_rom_path = '/home/nausea911/Downloads/romhacks/jetsoftime' # TODO(user):  Update if needed
rom_file='ct.sfc' # TODO(user): Update if needed
output_path = os.path.join(snes_rom_path,'jetsoftime_rom')

if not os.path.isdir(output_path):
    os.makedirs(output_path)

pygame.init()

# —————— Setup display ——————
# Fullscreen mode
screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
screen_width, screen_height = screen.get_size()
font = pygame.font.SysFont(None, 24)
font_flags = pygame.font.SysFont(None, 15)

# —————— Input init ——————
pygame.joystick.init()
for i in range(pygame.joystick.get_count()):
    pygame.joystick.Joystick(i).init()

# —————— Layout positions ——————
# Divider at one-third, panel content offset
DIVIDER_X = screen_width // 3
PANEL_X = DIVIDER_X + 20
column_start_location = 20

# —————— Colors ——————
WHITE = (255, 255, 255)
GRAY = (200, 200, 200)
DARK = (50, 50, 50)
BLUE = (0, 120, 215)
RED = (200, 0, 0)

# —————— Class definitions ——————

class ActivePanel():
    def __init__(self, **kwargs):

        self.options = {}
        self.setting_attribute = ''
        self.categories = []
        self.location = 0
        self.length = 0
        self.widgets = []

        self.__dict__.update(kwargs)

        if self.categories:
            self.length = sum([len(d) for d in self.options.values()])
        else:
            self.length = len(self.options)

    def callback(self):
        global game_state
        game_state.active_panel_name = self.name
        game_state.focused_idx = self.location
        game_state.set_focusables()

class GameState():

    def __init__(self, **kwargs):
        self.focusables = []
        self.focusable = None
        self._focused_idx = 0

        self.menu_buttons = None

        self.panels = []
        self._active_panel_name = ''
        self.active_panel = None

        self.generating_rom = False
        self.rom_name = ''
        self.rom_timer = None
        self.__dict__.update(kwargs)


    @property
    def focused_idx(self):
        return self._focused_idx

    @focused_idx.setter
    def focused_idx(self, value):
        self._focused_idx = value
        if self.focusables:
            self.focusable = self.focusables[value]

    @property
    def active_panel_name(self):
        return self._active_panel_name

    @active_panel_name.setter
    def active_panel_name(self, value):
        self._active_panel_name = value
        if self.panels:
            self.active_panel = self.panels[value]

    def set_focusables(self):
        self.focusables = self.menu_buttons.copy()

        active_widgets = self.active_panel.widgets
        if isinstance(active_widgets,dict):
            active_widgets = [v for value in active_widgets.values() for v in value]

        self.focusables += active_widgets

    def generate_rom(self):
        global settings

        self.generating_rom=True

        self.set_focusables()

        names = randomizer.read_names()
        settings.seed = "".join(random.choice(names) for i in range(2))

        rom = Path(os.path.join(snes_rom_path, rom_file)).read_bytes()
        
        rando = randomizer.Randomizer(rom, is_vanilla=False, settings=settings, config=None)
        rando.set_random_config()

        base_name, _ = os.path.splitext(rom_file)
        writer = randomizer.RandomizerWriter(rando, base_name=base_name)
        writer.write_output_rom(Path(output_path))
        
        self.generating_rom=False
        self.rom_name = f'{writer.out_string}.sfc'
        self.rom_timer = pygame.time.get_ticks()
        self.set_focusables()

# —————— Helpers ——————
def draw_text(text, pos, font, color=DARK):
    img = font.render(text, True, color)
    screen.blit(img, pos)

# —————— Button ——————
class Button():
    def __init__(self, rect, text, callback):
        self.rect = pygame.Rect(rect)
        self.text = text
        self.callback = callback

    def draw(self, is_focused=False):
        color = BLUE if self.rect.collidepoint(pygame.mouse.get_pos()) else GRAY
        pygame.draw.rect(screen, color, self.rect)
        draw_text(self.text, (self.rect.x + 10, self.rect.y + 8), font)
        if is_focused:
            pygame.draw.rect(screen, RED, self.rect, 2)

    def handle_event(self, evt):
        if evt.type == pygame.MOUSEBUTTONDOWN and evt.button == 1:
            if self.rect.collidepoint(evt.pos):
                self.activate()

    def activate(self):
        self.callback()

# —————— RadioButton ——————
class RadioButton():
    def __init__(self, pos, label, group):
        self.pos = pos
        self.label = label
        self.group = group
        self.radius = 8

    def draw(self, is_focused=False):
        global settings

        # Create radio button for option
        pygame.draw.circle(screen, DARK, self.pos, self.radius, 1)
        button_text = ' '.join([s.capitalize() for s in self.label.split(' ')])
        draw_text(button_text, (self.pos[0] + 15, self.pos[1] - 8), font)

        if self.group in game_state.panels:
            settings_attribute = settings.__dict__[game_state.panels[self.group].setting_attribute]
            if isinstance(settings_attribute,str):
                selected_option = settings_attribute
            else:
                selected_option = settings.__dict__[game_state.panels[self.group].setting_attribute].name
        else: # Multi Category
            for g in game_state.panels.values():
                if g.categories and self.group in g.options:
                    selected_option = settings.__dict__[g.setting_attribute[self.group]].name
                    break

        # If button match what is in the current settings.  Fill it in
        selected_label = ' '.join(selected_option.lower().split('_'))
        if selected_label == self.label.lower():
            pygame.draw.circle(screen, DARK, self.pos, self.radius - 3)

        if is_focused:
            pygame.draw.circle(screen, RED, self.pos, self.radius + 4, 2)

    def handle_event(self, evt):
        if evt.type == pygame.MOUSEBUTTONDOWN and evt.button == 1:
            dx = evt.pos[0] - self.pos[0]
            dy = evt.pos[1] - self.pos[1]
            if dx * dx + dy * dy <= self.radius * self.radius:
                self.activate()

    def activate(self):
        global settings, game_state
        
        if self.group in game_state.panels:

            if game_state.panels[self.group].setting_attribute == 'preset_choice': # Preset
                settings = game_state.panels[self.group].options[self.label]
                settings.preset_choice = self.label 
            else: # Single Category
                settings.__setattr__(game_state.panels[self.group].setting_attribute, game_state.panels[self.group].options[self.label])

        else: # Multi Category
            for g in game_state.panels.values(): # active panel consists of several categoies
                if g.categories and self.group in g.options:
                    settings.__setattr__(g.setting_attribute[self.group], g.options[self.group][self.label])

# —————— CheckBox ——————
class CheckBox():
    def __init__(self, pos, label, font):
        self.radius = int(font.get_height())
        self.rect = pygame.Rect(pos[0], pos[1], self.radius, self.radius)
        self.label = label
        self.font = font

    def draw(self, is_focused=False):
        global flags
        pygame.draw.rect(screen, DARK, self.rect, 1)

        # Set flags
        flags = {name:False for name in GameFlags._member_names_}
        current_flags = [s.split('.')[-1] for s in settings.gameflags.to_jot_json()]
        for current_flag in current_flags:
            flags[current_flag] = True

        if flags[self.label]:
            pygame.draw.line(screen, DARK, self.rect.topleft, self.rect.bottomright, 2)
            pygame.draw.line(screen, DARK, self.rect.topright, self.rect.bottomleft, 2)

        button_text = ' '.join([s.capitalize() for s in self.label.split('_')])
        draw_text(button_text, (self.rect.x + 20, self.rect.y), self.font)

        if is_focused:
            pygame.draw.rect(screen, RED, self.rect.inflate(6, 6), 2)

    def handle_event(self, evt):
        if evt.type == pygame.MOUSEBUTTONDOWN and evt.button == 1:
            label_rect = self.font.render(self.label, True, DARK).get_rect(
                topleft=(self.rect.x + 15, self.rect.y - 2)
            )

            if self.rect.collidepoint(evt.pos) or label_rect.collidepoint(evt.pos):
                self.activate()

    def activate(self):
        global flags

        flags[self.label] = not flags[self.label]
        flags_value = sum([GameFlags._member_map_[name].value for name, is_set in flags.items() if is_set])
        settings.gameflags = GameFlags(flags_value)
        settings.fix_flag_conflicts()


# —————— Game Settings ——————
game_state = GameState()
settings = Settings()
settings.preset_choice = "Default"

# Current choices

# —————— Preset configurations ——————
presets = {'Default':Settings(),
           'New Player':Settings.get_new_player_presets(),
           'Race':Settings.get_race_presets(),
           'Tourney T8':Settings.get_tourney_top8_preset(),
           'Lost Worlds':Settings.get_lost_worlds_presets(),
           'Hard':Settings.get_hard_presets()}
flags =  {name:False for name in GameFlags._member_names_}

active_panel_dict = {}
active_panel_dict['presets'] = ActivePanel(options=presets,
                                    setting_attribute = 'preset_choice',
                                    location = 0,
                                    name = 'presets')
active_panel_dict['mode'] = ActivePanel(options=GameMode.inv_str_dict(),
                                 setting_attribute = 'game_mode',
                                 location = 1,
                                 name = 'mode')
                                 
active_panel_dict['difficulty'] = ActivePanel(options={'item':Difficulty.inv_str_dict(),'enemy':Difficulty.inv_str_dict()},
                                       setting_attribute = {'item':'item_difficulty','enemy':'enemy_difficulty'},
                                       categories = ['item', 'enemy'], 
                                       location = 2,
                                       name = 'difficulty')

active_panel_dict['techshop'] = ActivePanel(options={'tech':TechOrder.inv_str_dict(),'shop':ShopPrices.inv_str_dict()},
                                       setting_attribute = {'tech':'techorder','shop':'shopprices'},
                                       categories = ['tech', 'shop'], 
                                       location = 3,
                                       name = 'techshop')         

active_panel_dict['flags'] = ActivePanel(options = flags,
                                  location = 4,
                                  name = 'flags')            


# —————— Instantiate widgets ——————
button_start = 50
button_step = 30
buttons = [
    #       x   y   h    l
    Button((20, 20, 100, 30), "Presets", active_panel_dict['presets'].callback),
    Button((20, 60, 100, 30), "Mode", active_panel_dict['mode'].callback),
    Button((20, 100, 100, 30), "Difficulty", active_panel_dict['difficulty'].callback),
    Button((20, 140, 100, 30), "Tech/Shop", active_panel_dict['techshop'].callback),
    Button((20, 180, 100, 30), "Flags", active_panel_dict['flags'].callback),
    Button((20, screen_height - 60, 100, 30), "Generate", game_state.generate_rom)
]

# TODO:  Can I move this to the class level?  Seems like a lot of duplicate code

# Presets
option_buttons = [(button_start + button_step*i, mode) for i, mode in  enumerate(presets)]
active_panel_dict['presets'].widgets = [ RadioButton((PANEL_X, y), lbl, "presets")  for y, lbl in option_buttons]

# Game Modes
option_buttons = [(button_start + button_step*i, s) for i, s in  enumerate(GameMode.str_dict().values())]
active_panel_dict['mode'].widgets = [ RadioButton((PANEL_X, y), lbl, "mode") for y, lbl in option_buttons]

# Difficulties
option_buttons = [(button_start + button_step*i, s) for i, s in  enumerate(Difficulty.str_dict().values())]
item_radios = [ RadioButton((PANEL_X, y), lbl, "item")  for y, lbl in option_buttons]

cstart = item_radios[-1].pos[1]+button_step*2 # Leave room for title
option_buttons = [(cstart + button_step*i, s) for i, s in  enumerate(Difficulty.str_dict().values())]
enemy_radios = [ RadioButton((PANEL_X, y), lbl, "enemy")  for y, lbl in option_buttons]

active_panel_dict['difficulty'].widgets =  {"Item Difficulty": item_radios, 'Enemy Difficulty': enemy_radios}

# Tech Order and Shop Prices

option_buttons = [(button_start + button_step*i, s) for i, s in  enumerate(TechOrder.str_dict().values())]
tech_radios = [ RadioButton((PANEL_X, y), lbl, "tech")  for y, lbl in option_buttons]

cstart = tech_radios[-1].pos[1]+button_step*2 # Leave room for title
option_buttons = [(cstart + button_step*i, s) for i, s in  enumerate(ShopPrices.str_dict().values())]
shop_radios = [ RadioButton((PANEL_X, y), lbl, "shop")  for y, lbl in option_buttons]

active_panel_dict['techshop'].widgets =  {"Tech Order": tech_radios, 'Shop Prices': shop_radios}

# Game flags
flag_buttons = [(column_start_location + (font_flags.get_height()+1)*i, s) for i, s in  enumerate(flags)]
active_panel_dict['flags'].widgets = [ CheckBox((PANEL_X, y), lbl, font_flags) for y, lbl in flag_buttons]


# —————— Initialize game state ——————
game_state.menu_buttons = buttons
game_state.panels = active_panel_dict
game_state.active_panel_name = 'presets'
game_state.set_focusables()


# —————— Main loop ——————
clock = pygame.time.Clock()
while True:
    now = pygame.time.get_ticks()
    
    # When generating ROM, lock controls
    if game_state.generating_rom:
        continue
    elif game_state.rom_timer and now - game_state.rom_timer <= 2000:
        draw_text(f"ROM Complete: {game_state.rom_name}", (PANEL_X, screen_height - 60), font, BLUE)
        pygame.display.flip()
        continue

    screen.fill(WHITE)
    for evt in pygame.event.get():
        if evt.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        # —————— User Input and Navigation ——————

        # Check for user input and update focus location
        if evt.type == pygame.KEYDOWN:
  
            # Check if focus location is on the left or right side and get column length to determine when to wrap around
            focus_idx = game_state.focused_idx
            if focus_idx < len(game_state.menu_buttons): # if left side
                column = -1
                column_start = 0
                column_end = len(game_state.menu_buttons)-1
            else:
                column = 1
                column_start = len(game_state.menu_buttons)
                column_end = column_start + game_state.active_panel.length -1


            if evt.key == pygame.K_UP:
                if focus_idx == column_start: # Check to wrap around
                    focus_idx = column_end
                else:
                    focus_idx-=1

            elif evt.key == pygame.K_DOWN:
                if focus_idx == column_end: # Check to wrap around
                    focus_idx = column_start
                else:
                    focus_idx+=1    

            elif evt.key in (pygame.K_LEFT, pygame.K_RIGHT):
                if column<0: # If on the left side, go to top of the right side
                    focus_idx = len(game_state.menu_buttons)
                else: # If on the right side, current active menu button
                    focus_idx = game_state.active_panel.location

            elif evt.key in (pygame.K_RETURN, pygame.K_SPACE,97,98):  # 97 and 98 are A&B buttons on Anbernic Devices, typically
                game_state.focusable.activate()

            game_state.focused_idx = focus_idx

        elif evt.type == pygame.JOYBUTTONDOWN and evt.button == 0:
            game_state.focusable.activate()

        # Handle button selection events
        active_widgets = game_state.active_panel.widgets
        if isinstance(active_widgets,dict):
            active_widgets = [v for value in active_widgets.values() for v in value]

        for w in game_state.menu_buttons + active_widgets:
            w.handle_event(evt)

    # —————— Draw Menu ——————

    # Create divider line to split menu and option buttons
    pygame.draw.line(screen, DARK, (DIVIDER_X, 0), (DIVIDER_X, screen_height), 2)

    # Draw Menu Buttons
    for w in game_state.menu_buttons:
        w.draw(is_focused=(game_state.focusable is w))

    # Draw Option Buttons
    active_widgets = game_state.active_panel.widgets

    # Multi Category
    if isinstance(active_widgets,dict):
        category_location = column_start_location
        for category, category_widgets in active_widgets.items():
            draw_text(category, (PANEL_X-category_widgets[0].radius, category_location), font)
            for w in category_widgets:
                w.draw(is_focused=(game_state.focusable is w))
                category_location=w.pos[1] + button_step

    # Single Category
    else:
        for w in active_widgets:
            w.draw(is_focused=(game_state.focusable is w))

    pygame.display.flip()
    clock.tick(60)